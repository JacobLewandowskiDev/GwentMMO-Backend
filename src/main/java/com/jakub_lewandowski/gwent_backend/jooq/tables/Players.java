/*
 * This file is generated by jOOQ.
 */
package com.jakub_lewandowski.gwent_backend.jooq.tables;


import com.jakub_lewandowski.gwent_backend.jooq.Keys;
import com.jakub_lewandowski.gwent_backend.jooq.Public;
import com.jakub_lewandowski.gwent_backend.jooq.tables.records.PlayersRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Players extends TableImpl<PlayersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.players</code>
     */
    public static final Players PLAYERS = new Players();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlayersRecord> getRecordType() {
        return PlayersRecord.class;
    }

    /**
     * The column <code>public.players.id</code>.
     */
    public final TableField<PlayersRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.players.username</code>.
     */
    public final TableField<PlayersRecord, String> USERNAME = createField(DSL.name("username"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.players.sprite</code>.
     */
    public final TableField<PlayersRecord, Integer> SPRITE = createField(DSL.name("sprite"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.players.wins</code>.
     */
    public final TableField<PlayersRecord, Integer> WINS = createField(DSL.name("wins"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.players.losses</code>.
     */
    public final TableField<PlayersRecord, Integer> LOSSES = createField(DSL.name("losses"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.players.x_pos</code>.
     */
    public final TableField<PlayersRecord, Integer> X_POS = createField(DSL.name("x_pos"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.players.y_pos</code>.
     */
    public final TableField<PlayersRecord, Integer> Y_POS = createField(DSL.name("y_pos"), SQLDataType.INTEGER.nullable(false), this, "");

    private Players(Name alias, Table<PlayersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Players(Name alias, Table<PlayersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.players</code> table reference
     */
    public Players(String alias) {
        this(DSL.name(alias), PLAYERS);
    }

    /**
     * Create an aliased <code>public.players</code> table reference
     */
    public Players(Name alias) {
        this(alias, PLAYERS);
    }

    /**
     * Create a <code>public.players</code> table reference
     */
    public Players() {
        this(DSL.name("players"), null);
    }

    public <O extends Record> Players(Table<O> child, ForeignKey<O, PlayersRecord> key) {
        super(child, key, PLAYERS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<PlayersRecord, Long> getIdentity() {
        return (Identity<PlayersRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PlayersRecord> getPrimaryKey() {
        return Keys.PLAYERS_PKEY;
    }

    @Override
    public Players as(String alias) {
        return new Players(DSL.name(alias), this);
    }

    @Override
    public Players as(Name alias) {
        return new Players(alias, this);
    }

    @Override
    public Players as(Table<?> alias) {
        return new Players(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Players rename(String name) {
        return new Players(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Players rename(Name name) {
        return new Players(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Players rename(Table<?> name) {
        return new Players(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, Integer, Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Long, ? super String, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Long, ? super String, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
